// Code generated by MockGen. DO NOT EDIT.
// Source: ./server.go

// Package server is a generated GoMock package.
package server

import (
	net "net"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUDPconnection is a mock of UDPconnection interface.
type MockUDPconnection struct {
	ctrl     *gomock.Controller
	recorder *MockUDPconnectionMockRecorder
}

// MockUDPconnectionMockRecorder is the mock recorder for MockUDPconnection.
type MockUDPconnectionMockRecorder struct {
	mock *MockUDPconnection
}

// NewMockUDPconnection creates a new mock instance.
func NewMockUDPconnection(ctrl *gomock.Controller) *MockUDPconnection {
	mock := &MockUDPconnection{ctrl: ctrl}
	mock.recorder = &MockUDPconnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUDPconnection) EXPECT() *MockUDPconnectionMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockUDPconnection) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockUDPconnectionMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockUDPconnection)(nil).Close))
}

// ReadFromUDP mocks base method.
func (m *MockUDPconnection) ReadFromUDP(b []byte) (int, *net.UDPAddr, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFromUDP", b)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(*net.UDPAddr)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadFromUDP indicates an expected call of ReadFromUDP.
func (mr *MockUDPconnectionMockRecorder) ReadFromUDP(b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFromUDP", reflect.TypeOf((*MockUDPconnection)(nil).ReadFromUDP), b)
}

// Write mocks base method.
func (m *MockUDPconnection) Write(b []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", b)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockUDPconnectionMockRecorder) Write(b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockUDPconnection)(nil).Write), b)
}
